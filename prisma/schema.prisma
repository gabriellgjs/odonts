generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cargos {
  id            Int       @id @default(autoincrement())
  nome          String    @db.VarChar(100)
  funcionario   Funcionarios[]
}

model Tratamentos {
  id                Int                         @id @default(autoincrement())
  name              String                      @db.VarChar(100)
  duracao_esperada  DateTime                    @db.DateTime()
  agendamentos      TratamentoAgendamento[]  
}

model PlanosDeSaude {
  id         Int       @id @default(autoincrement())
  nome       String    @db.VarChar(100)
  descricao  String    @db.VarChar(100)
  paciente   Pacientes[]
}

model Enderecos {
  id         Int       @id @default(autoincrement())
  rua        String    @db.VarChar(255)
  bairro     String    @db.VarChar(100)
  cidade     String    @db.VarChar(100)
  cep        String    @db.VarChar(50)
  estado     String    @db.VarChar(50)
  pessoa     Pessoas?  @relation(fields: [pessoaId], references: [id])
  pessoaId   Int
}

model Telefones {
  id           Int       @id @default(autoincrement())
  telefone     String    @db.VarChar(20)
  pessoa       Pessoas?  @relation(fields: [pessoaId], references: [id])
  pessoaId     Int
}

model Pessoas {
  id              Int       @id @default(autoincrement())
  nome            String    @db.VarChar(255)
  dataNascimento  DateTime  @db.Date()
  rg              String    @db.VarChar(10)
  cpf             String    @db.VarChar(12)
  genero          String    @db.VarChar(100)
  funcionario     Funcionarios[]
  paciente        Pacientes[]
  telefone        Telefones[]
  endereco        Enderecos[]
}

model Funcionarios {
  id                 Int           @id @default(autoincrement())
  dataAdmissao       DateTime      @db.Date()
  dataDesligamento   DateTime?     @db.Date()
  cargo              Cargos?        @relation(fields: [cargoId], references: [id])
  cargoId            Int
  agendamento        Agendamentos[] 
  usuario            Usuarios[]
  pessoa             Pessoas?  @relation(fields: [pessoaId], references: [id])
  pessoaId           Int        
}

model Pacientes {
  id              Int             @id @default(autoincrement())  
  estadoCivil     String          @db.VarChar(100)
  agendamento     Agendamentos[] 
  planoDeSaude    PlanosDeSaude?    @relation(fields: [planoDeSaudeId], references: [id])
  planoDeSaudeId  Int
  pessoa          Pessoas?  @relation(fields: [pessoaId], references: [id])
  pessoaId        Int   
}

model Usuarios {
  id              Int             @id @default(autoincrement())
  email           String          @db.VarChar(255)
  senha           String          @db.VarChar(255)
  funcionario     Funcionarios?   @relation(fields: [funcionarioId], references: [id])
  funcionarioId   Int
}

model Agendamentos {
  id                  Int                       @id @default(autoincrement())
  paciente            Pacientes                 @relation(fields: [pacienteId], references: [id])
  pacienteId          Int   
  funcionario         Funcionarios              @relation(fields: [funcionarioId], references: [id])
  funcionarioId       Int
  agendadoPara        DateTime                  @db.DateTime()
  duracaoAgendamento  DateTime?                 @db.DateTime()
  tratamento          TratamentoAgendamento[] 
}

model TratamentoAgendamento {
  agendamento      Agendamentos    @relation(fields: [agendamentoId], references: [id])
  agendamentoId    Int
  tratamento       Tratamentos     @relation(fields: [tratamentoId], references: [id])
  tratamentoId      Int
  @@id([agendamentoId, tratamentoId])
}
